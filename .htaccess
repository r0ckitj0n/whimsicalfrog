# Root .htaccess for clean URL routing via router.php and to avoid MultiViews interfering

# Disable MultiViews so /shop does not get rewritten to shop.php implicitly
Options -MultiViews

# Enable RewriteEngine
RewriteEngine On
RewriteBase /

# Security: Block direct access to sensitive files (SQL dumps, env, logs, archives)
# Applies before "serve existing files" rule below
<FilesMatch "\.(sql|sqlite|db|env|ini|log|bak|old|zip|tar|gz|7z|rar|bk|bkp)$">
  <IfModule mod_authz_core.c>
    Require all denied
  </IfModule>
  <IfModule !mod_authz_core.c>
    Order allow,deny
    Deny from all
  </IfModule>
</FilesMatch>

# Disable directory listings globally (defense-in-depth)
Options -Indexes

# Deny access to sensitive directories that should never be web-served
# Use early 403 to avoid falling through to router.php
RewriteRule ^backups/ - [R=403,L]
RewriteRule ^scripts/ - [R=403,L]
RewriteRule ^\.git/ - [R=403,L]
RewriteRule ^\.github/ - [R=403,L]
RewriteRule ^vendor/ - [R=403,L]

# Deny hidden dotfiles except .well-known/ (e.g., .env, .htaccess, .gitignore)
RewriteRule ^\.(?!well-known/) - [R=403,L]

# Deny source maps in production (reduce source disclosure)
<FilesMatch "\.(map)$">
  <IfModule mod_authz_core.c>
    Require all denied
  </IfModule>
  <IfModule !mod_authz_core.c>
    Order allow,deny
    Deny from all
  </IfModule>
</FilesMatch>

# Safe security headers (do not block content)
<IfModule mod_headers.c>
  Header always set X-Content-Type-Options "nosniff"
  Header always set X-Frame-Options "SAMEORIGIN"
  Header always set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>

# Map stale app.js-* requests to the current bundle directly (internal rewrite, no redirect)
RewriteRule ^dist/assets/js/app\.js-[A-Za-z0-9_\-]+\.js$ router.php [L,QSA]

# Ensure correct MIME types and strong caching for built assets
<IfModule mod_mime.c>
  AddType application/javascript .js
  AddType application/javascript .mjs
  AddType text/css .css
  AddType image/webp .webp
  AddType image/svg+xml .svg
</IfModule>

# Cache hashed assets aggressively; they are content-addressed
<IfModule mod_expires.c>
  ExpiresActive On
  <FilesMatch "^dist/assets/.*$">
    ExpiresDefault "access plus 1 year"
  </FilesMatch>
</IfModule>

# Extra safety: set explicit headers for built assets
<IfModule mod_headers.c>
  <FilesMatch "^dist/assets/.*\.(js|css)$">
    Header set Cache-Control "public, max-age=31536000, immutable"
  </FilesMatch>
</IfModule>

# Short-circuit /dist/* requests: serve if file exists
RewriteCond %{REQUEST_URI} ^/dist/ [NC]
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^ - [L]

# Route missing hashed JS/CSS chunks under /dist/assets to router.php for graceful fallback
RewriteCond %{REQUEST_URI} ^/dist/assets/ [NC]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ router.php [L,QSA]

# For other missing /dist/* files, return 404 to avoid HTML fallthrough
RewriteCond %{REQUEST_URI} ^/dist/ [NC]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule . - [R=404,L]

# Only allow direct access to existing files. Route other requests (including
# missing files under existing directories) through router.php so it can
# implement graceful fallbacks for built assets.
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^ - [L]

# Route everything else through router.php (front controller)
# Exclude nothing special here; router.php will itself allow static files
RewriteRule ^ router.php [L,QSA]
