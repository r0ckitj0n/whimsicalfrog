<?php
// scripts/db/php_dump_dev.php
// PHP-based database dumper for DEV (local) environment, no mysqldump required.
// Outputs a SQL file under backups/sql/dev_full_YYYY-MM-DD_HH-MM-SS.sql
// Usage: php scripts/db/php_dump_dev.php [--gzip]

ini_set('memory_limit', '1024M');
set_time_limit(0);

$root = dirname(__DIR__, 2);
require_once $root . '/api/config.php'; // uses local DB when PHP_SAPI === 'cli'

function q($s){ return '`' . str_replace('`','``',$s) . '`'; }
function sql_escape(PDO $pdo, $v){
  if ($v === null) return 'NULL';
  if (is_bool($v)) return $v ? '1' : '0';
  if (is_int($v) || is_float($v)) return (string)$v;
  return $pdo->quote((string)$v);
}

$pdo = Database::getInstance();

$date = date('Y-m-d_H-i-s');
$outDir = $root . '/backups/sql';
@mkdir($outDir, 0777, true);
$outPath = $outDir . '/dev_full_' . $date . '.sql';
$fh = fopen($outPath, 'wb');
if (!$fh) { fwrite(STDERR, "Failed to open output file: $outPath\n"); exit(1); }

$dbName = wf_get_db_config('local')['db'] ?? 'whimsicalfrog';
fwrite($fh, "-- DEV dump generated by php_dump_dev.php\n");
fwrite($fh, "-- Database: " . $dbName . "\n\n");

// Disable FK checks for restore convenience
fwrite($fh, "SET FOREIGN_KEY_CHECKS=0;\n\n");

// Gather tables
$tables = [];
$stmt = $pdo->query("SHOW FULL TABLES WHERE Table_type = 'BASE TABLE'");
while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
  $tables[] = $row[0];
}

foreach ($tables as $table) {
  // DROP + CREATE
  fwrite($fh, "--\n-- Table structure for table " . q($table) . "\n--\n\n");
  fwrite($fh, "DROP TABLE IF EXISTS " . q($table) . ";\n");
  $create = $pdo->query("SHOW CREATE TABLE " . q($table))->fetch(PDO::FETCH_ASSOC);
  $createSql = $create['Create Table'] ?? '';
  fwrite($fh, $createSql . ";\n\n");

  // Data
  fwrite($fh, "--\n-- Dumping data for table " . q($table) . "\n--\n");
  $countRow = $pdo->query("SELECT COUNT(*) AS c FROM " . q($table))->fetch(PDO::FETCH_ASSOC);
  $total = (int)($countRow['c'] ?? 0);
  if ($total === 0) { fwrite($fh, "\n"); continue; }

  $batch = 1000;
  $offset = 0;

  // Fetch column list
  $cols = [];
  $colStmt = $pdo->query("SHOW COLUMNS FROM " . q($table));
  while ($c = $colStmt->fetch(PDO::FETCH_ASSOC)) { $cols[] = $c['Field']; }
  $colList = '(' . implode(', ', array_map('q', $cols)) . ')';

  while ($offset < $total) {
    $sel = $pdo->query("SELECT * FROM " . q($table) . " LIMIT " . (int)$batch . " OFFSET " . (int)$offset);
    $valuesSets = [];
    while ($r = $sel->fetch(PDO::FETCH_ASSOC)) {
      $vals = [];
      foreach ($cols as $col) { $vals[] = sql_escape($pdo, $r[$col] ?? null); }
      $valuesSets[] = '(' . implode(', ', $vals) . ')';
      if (count($valuesSets) >= 200) { // chunk INSERTS to keep lines reasonable
        fwrite($fh, "INSERT INTO " . q($table) . " $colList VALUES\n  " . implode(",\n  ", $valuesSets) . ";\n");
        $valuesSets = [];
      }
    }
    if (!empty($valuesSets)) {
      fwrite($fh, "INSERT INTO " . q($table) . " $colList VALUES\n  " . implode(",\n  ", $valuesSets) . ";\n");
    }
    $offset += $batch;
  }
  fwrite($fh, "\n");
}

fwrite($fh, "SET FOREIGN_KEY_CHECKS=1;\n");
fclose($fh);

echo $outPath, "\n";

if (in_array('--gzip', $argv, true) || in_array('-z', $argv, true)) {
  $gz = $outPath . '.gz';
  $in = fopen($outPath, 'rb');
  $gzh = gzopen($gz, 'wb9');
  while (!feof($in)) { gzwrite($gzh, fread($in, 8192)); }
  fclose($in); gzclose($gzh);
  @unlink($outPath);
  echo $gz, "\n";
}
